---
title: "Module18"
format: html
editor: visual
---
# Mixed Effects Models

### install packages
```{r}
library(curl)
library(ggplot2)
library(lme4)
library(AICcmodavg)
library(MuMIn)
```

A final extension of linear regression modeling that we will talk about is so-called “multilevel” or “mixed effects” modeling. This is a very complex topic, and we will only scratch the surface! There are many varieties of mixed models.

Linear mixed models (LMM), if we’re dealing with normally distributed variables and error structures.

Generalized linear mixed models (GLMM), if we’re dealing with various other variable types and error structure (e.g., binary, proportion, or count data).

Nonlinear mixed models (NLMM), if we’re dealing with situations where our response variable is best modeled by a nonliner combination of predictors.

NOTE: We have not talked in this course about general or generalized NONLINEAR modeling, but it’s worth knowing that such approaches are also possible. NONLINEAR modeling is where our regression equation is a nonlinear function of the model parameters; for example, I’ve used NLMMs to model somatic growth in vervet monkeys.

In a (general or generalized) linear mixed model, we have a reponse variable, 𝑌, and observations that fall into different factor categories each with some set of levels (e.g., “sex” with levels “male” and “female”), and we are interested in the effects of these factors and factor levels on the response variable. Generically, if 𝜇 = a population mean response and 𝜇𝐴 = mean response for observations belonging to factor level A, then the effect of A is given by 𝜇 - 𝜇𝐴. We have already dealt with factors and factor levels in our linear regression models when we looked at categorical predictors (e.g., sex, rank category) in our discussions of ANOVA and ANCOVA.

However, if our observational data were to consist of repeated observations of the same sampling unit, e.g., measurements taken on the same set of individuals on different dates, individual ID would be considered a random factor because it is unlikely that we will have collected data from all possible “levels of interest”, i.e., from all possible individual subjects. We have not yet dealt with such random factors as an additional source of variance in our modeling.

Mixed models are those that include BOTH fixed and random effects. Including random effects in addition to fixed effects in our models has several ramifications:

Using random effects broadens the scope of inference. That is, we can use statistical methods to infer something about the population from which the levels of the random factor have been drawn.

Using random effects naturally incorporates dependence in the model and helps us account for pseudoreplication in our dataset. Observations that share the same level of the random effects are explicitly modeled as being correlated. This makes mixed effect modeling very useful for dealing with time series data, spatially correlated data, or situations where we have repeated observations/measures from the same subjects or sampling unit.

Using random factors often gives more accurate parameter estimates.

Incorporating random factors, however, does require the use of more sophisticated estimation and fitting methods.




Suppose we have measured the amount of grooming received by female chimpanzees when they are either in their periovulatory period (i.e., the window of 2-3 days around the likely time of ovulation) or during other portions of their reproductive cycle. We collected data on the duration of grooming bouts received and scored the female’s reproductive condition at the time as a categorical factor with two levels: “POP” versus “NONPOP”. On top of that, we also recorded data on female parity at the time of the grooming bout, i.e., whether the female had given birth previously (was “parous”, or “P”) or had not yet had an offspring (was “nulliparous”, or “N”).

If we’re interested in how reproductive condition and parity influence how much grooming a female receives, our regression model would look like this:

grooming duration ~ condition + parity + 𝜖

Also imagine that our study design was such that we took multiple observations per subject. That is, our data set includes records of multiple grooming bouts received by each subject. This situation violates the assumption of independence of observations that we make for standard linear regression: multiple responses/measures from the same subject cannot be regarded as independent from each other.

Using a mixed effects model, we can deal with this situation by adding subject ID as a random effect in our model. Doing so allows us to address the nonindependence issue by estimating a different set of parameters for each level of the factor subject. We can either estimate a different intercept for each subject (which would correspond to each female having a different “baseline” level of grooming received) or estimate a different intercept and slope (where individual subjects are presumeed to differ both in the baseline level of grooming received and the strength of the relationship between grooming duration, on the one hand, and reproductive condition and parity, on the other). Our mixed effects model estimates these individual level parameters in addition to the main effects of each variable.

This is why a mixed effects model is called a mixed model. The models that we have considered so far have been “fixed effects only” models and included only one or more “fixed” predictor variables and a general error term. We essentially divided the world into things that we somehow understand or that are systematic (the fixed effects, or the explanatory variables) and things that we could not control for or do not understand (𝜖). These fixed effects models did not examine possible structure within the error term. In a mixed model, by contrast, we add one or more random effects to our fixed effects that may explain a portion of the variance in our error term.

# Challenge 1

Let’s explore these idea using some actual data. First, load in the dataset “chimpgrooming.csv” and do some exploratory data analysis:
```{r}
f <- curl("https://raw.githubusercontent.com/fuzzyatelin/fuzzyatelin.github.io/master/AN588_Fall21/chimpgrooming.csv")
d <- read.csv(f, header = TRUE, sep = ",")
head(d)
```

```{r}
summary(d)
```

```{r}
# first, some exploratory visualization let's plot grooming received
# duration in relation to subject ID
par(mfrow = c(1, 1))
boxplot(data = d, duration ~ subject, col = c("lightpink1"))
```

```{r}
# we see lots of individual variation let's plot grooming received
# duration in relation to reproductive condition
boxplot(data = d, duration ~ reprocondition, col = c("burlywood2", "lightpink1"))
```

```{r}
# let's plot grooming received duration in relation to reproductive
# condition and parity
boxplot(data = d, duration ~ reprocondition * parity, col = c("burlywood2",
    "lightpink1"))
```

```{r}
boxplot(data = d, duration ~ reprocondition * subject, col = c("burlywood2",
    "lightpink1"))
```

What patterns do you see?

# Random Intercept Models

We will now perform an initial mixed effects analysis where we look at how reproductive condition and parity (as fixed effect) effect grooming duration, where we include individual subject ID as a random effect.

Here is a first mixed effects model that we will fit, using one extension of formula notation that is commonly used in R.

grooming duration ~ condition + parity + (1|subject) + 𝜖

Here, the 1 refers to the fact that we want to estimate an intercept and the pipe “|” operator following the “1” signifies that we want to estimate a different intercept for each subject. Note that this generic formula still contains a general error term, 𝜖, to highlight that there will still be unexplained “error” variance after accounting for both fixed and random effects in the model.

We can think of this formula as saying that we expect our dataset to include multiple observations of the response variable per subject, and these responses will depend, in part, on each subject’s baseline level. This effectively accounts the nonindependence that stems from having multiple responses by the same subject.

The {lme4} package in R is commonly used for mixed effects modeling, and the function lmer() is the mixed model equivalent of the function lm(). In the formula syntax for mixed effects models using the {lme4} package, fixed effect are included without parentheses while random effects are included in parentheses (the error, 𝜖, is understood and is not included explicitly).

NOTE: We could also use the package {nlme} for mixed effects modeling (which requires a slightly different formula syntax that that used here). Both packages also allow us to do GLMMs and nonlinear mixed effects modeling, which we will not be discussing. It is important to note that {lme4} uses, by default, a slightly different parameter estimation algorithm than {nlme}. Unless otherwise specified, {lme4} uses “restricted maximum likelihood” (REML) rather than ordinary maximum likelihood estimation, which is what is used in {nlme}. In practice, these give very similar results. We will see below that when we want to compare different models using {lme4}, we will need to tell {lme4} to use ordinary maximum likelihood.

The code block below implements this first mixed effects model.

```{r}
lme <- lmer(data = d, duration ~ reprocondition + parity + (1 | subject))
summary(lme)
```

Let’s focus on the output for the random effects first. Have a look at the column standard deviation. The entry for subject shows us how much variability in grooming duration (apart from that explained by the fixed effects) is due to subject ID. The entry for Residual summarizes the remaining variability in grooming duration that is not due to subject or to our fixed effects. This is our 𝜖
, the “random” deviations from the predicted values that are not due to either subject or our fixed effects.

The fixed effects output mirrors the coefficient tables that we have seen previously in our linear models that have focused only on fixed effects. The coefficient “reproconditionPOP” is the 𝛽
 coefficient (slope) for the categorical effect of reproductive condition. The positive for the coefficient means that grooming duration is GREATER by 20.293 units for POP than for NONPOP females. Then, there’s a standard error associated with this slope, and a t value, which is simply the estimate divided by the standard error.

The coefficient “parityP” is the 𝛽
 coefficient for the categorical effect of parity. The grooming duration associated with being parous versus nulliparous is GREATER by 109.65 units.

The INTERCEPT in this case is the grooming duration associated with nulliparous, NONPOP females. Like the lm() function, the lmer() took whatever factor level came first in the alphabet to be the reference level for each fixed effect variable.

Let’s also look at the coefficients coming out of the model.

```{r}
coefficients(lme)
```
We can see the separate intercepts, or “baseline” level of grooming received, associated with each female when they are (presumably) nulliparous and in a NONPOP reproductive condition. Note that not all females are, necessarily, ever seen in a particular parity or reproductive condition.

# Statistical Significance in Mixed Effects Models

In mixed effects models, it is not as straightfoward to determine p values associated with either overall models or individual coefficients as it is for standard linear models. However, using likelihood ratio tests, which we previously used for comparing generalized linear models, is one common approach. Likelihood is the probability of seeing the data we have actually collected given a particular model. The logic of the likelihood ratio test is to compare the likelihood of two models with each other, i.e., a model that includes the factor that we are interested in versus a reduced, nested model with that factor excluded.

So… if we are interested in the effect of reproductive condition on grooming duration we could compare:

grooming duration ~ condition + parity + (1|subject) + 𝜖

grooming duration ~ parity + (1|subject) + 𝜖

In R, we would do this as follows:
```{r}
full <- lmer(data = d, duration ~ reprocondition + parity + (1 | subject), REML = FALSE)
summary(full)
```

```{r}
reduced <- lmer(data = d, duration ~ parity + (1 | subject), REML = FALSE)
summary(reduced)
```
NOTE: Here, we added the argument REML=FALSE to the lmer() function. This is necessary to do when we want to compare models using the likelihood ratio test. Basically, REML uses a different algorithm to determine likelihood values than ordinary likelihood, and, if we want to use these likelihoods to execute an LRT, we need to use ordinary likelihood. See this site for a more complete explanation of this issue.

We perform the likelihood ratio test using the anova() function.

```{r}
anova(reduced, full, test = "Chisq")
```
The results tell us that the model containing reproductive condition fits the data better than a null model lacking this variable. What about parity?
```{r}
full <- lmer(data = d, duration ~ reprocondition + parity + (1 | subject), REML = FALSE)
reduced <- lmer(data = d, duration ~ reprocondition + (1 | subject), REML = FALSE)
anova(reduced, full, test = "Chisq")
```
Based on this result, including parity also significantly improves the fit of our model.

# Challenge 2

Construct a model that includes an interaction of reproductive condition and parity and compare it to a model without the interaction term. Is the interaction of these two fixed effects significant?
```{r}
full <- lmer(data = d, duration ~ reprocondition * parity + (1 | subject), REML = FALSE)
reduced <- lmer(data = d, duration ~ reprocondition + parity + (1 | subject),
    REML = FALSE)
anova(reduced, full, test = "Chisq")
```

# Random Slope Models

In the exercise above, we included only estimation of a separate intercept for each female and presumed that the same relationship between grooming duration and reproductive condition + parity obtained for all females. But we can also allow that relationship to vary across subjects. We would indicate this model in formula notation as follows:

```{r}
lme <- lmer(data = d, duration ~ reprocondition + parity + (1 + reprocondition |
    subject) + (1 + parity | subject), REML = FALSE)
```

```{r}
summary(lme)
```

Here, we have changed the random effects, which now look a little more complicated. The notation “(1 + reprocondition|subject)” tells the model to estimate differing baseline levels of grooming duration (the intercept, represented by 1) as well as differing responses to the main factor in question, which is reproductive condition in this case. We do the same for parity.

Looking at the coefficients of the new model, we see the effects. Each female now has a different intercept and a different coefficient for the slopes of grooming duration as a function of both reproductive condition and parity.

```{r}
coefficients(lme)
```
To then get p values associated with each of the fixed factors, we could use LRTs…

```{r}
# reproductive condition
full <- lmer(data = d, duration ~ reprocondition + parity + (1 + reprocondition |
    subject) + (1 + parity | subject), REML = FALSE)
```

```{r}
reduced <- lmer(data = d, duration ~ parity + (1 + reprocondition | subject) +
    (1 + parity | subject), REML = FALSE)
```

```{r}
anova(reduced, full, test = "Chisq")
```

```{r}
# parity
full <- lmer(data = d, duration ~ reprocondition + parity + (1 + reprocondition |
    subject) + (1 + parity | subject), REML = FALSE)
```

```{r}
null <- lmer(data = d, duration ~ reprocondition + (1 + reprocondition | subject) +
    (1 + parity | subject), REML = FALSE)
```

```{r}
anova(reduced, full, test = "Chisq")
```
Note that in both cases, we get a significant LRT, but we also get warnings that our null models “failed to converge”. Lack of convergence is sometimes due to having a LOT of parameters we are trying to estimate relative to the number of observations we have, though in this case the full model has more parameters than the reduced model. Dealing with lack of convergence in fitting maximum likelihood models is beyond what we can cover here, so I encourage you to explore that on your own :)

# Determining Model Fit

For a long time, the appropriateness of our mixed-models was assessed as we did above: by determining the significance of each fixed effect using a LRT. Once information theoretic approaches became popular, we switched over to assessing model fit using AIC, but remember that AIC can only tell us relative fit, not whether it is a good fit, overall.

In 2013, Nakagawa & Schielzeth changed that by publishing a simple and effective method for getting an 𝑅2 value for generalized linear mixed models (recall, too, that linear mixed models are a specific type of GLMM, so this method can be used with LMM, as well). They point out that AIC has some critical limitations for expressing how well a model fits a dataset:
- While AIC provides an estimate of the relative fit of various models, it does not say anything about the absolute fit
- AIC cannot address the amount of variance explained by a model
- AIC is not comparable across datasets, and so fit is not generalizeable

In their paper, Nakagawa & Schielzeth propose two different measures of ‘variance explained’ for mixed models:
- Marginal (𝑅2𝐺𝐿𝑀𝑀(𝑚)): is variance explained on the latent (or link) scale rather than the original scale; we can interpret this as the variance explained by only the fixed effects.
- Conditional (𝑅2𝐺𝐿𝑀𝑀(𝑐)): is variance explained by fixed and random factors; put another way, this is the variance explained by the entire model.

There is an easy way to assess 𝑅2𝐺𝐿𝑀𝑀 in R using the r.squaredGLMM() function in the package {MuMIn}.

# Challenge 3

Compare the full, reduced, and null mixed models from our random slope exercise using an information theoretic approach. Is your best model the best fit (e.g., explain the most variance) for the dataset? How much more variance is explained by the random effects than the fixed effects alone?

```{r}
library(AICcmodavg)
print(aictab(list(full, reduced, null), c("full", "reduced", "null")), LL = FALSE)
```

```{r}
library(AICcmodavg)
print(aictab(list(full, reduced, null), c("full", "reduced", "null")), LL = FALSE)
```

```{r}
library(MuMIn)
r.squaredGLMM(full)

```

```{r}
r.squaredGLMM(reduced)
```

```{r}
r.squaredGLMM(null)
```

# Generalized Linear Mixed Modeling (GLMM)

Just as we extended our standard linear modeling approach to include non normally distributed response variables/error structures, so too can we extend our mixed effects modeling to such situations. This is referred to as generalized linear mixed modeling, or GLMM. There are several R packages we can use to do this (e.g., {MCMCglmm}, {lme4} using the glmer() call). The methods for generating maximum likelihood parameter estimates under GLMMs are more complicated, but conceptually, the process is a simple extension of what we have talked about already.
